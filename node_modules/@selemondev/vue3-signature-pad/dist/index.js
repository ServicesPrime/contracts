// src/components/VueSignaturePad.vue
import { defineComponent as _defineComponent } from "vue";
import { createElementVNode as _createElementVNode, withModifiers as _withModifiers, normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock } from "vue";
import { nanoid } from "nanoid";
import SignaturePad from "signature_pad";
import { onBeforeUnmount, onMounted, ref, watch, watchEffect } from "vue";
var _hoisted_1 = ["id", "data-uid"];
var _sfc_main = /* @__PURE__ */ _defineComponent({
  ...{
    name: "VueSignaturePad",
    inheritAttrs: false
  },
  __name: "VueSignaturePad",
  props: {
    options: {},
    width: { default: "100%" },
    height: { default: "100%" },
    minWidth: { default: 5 },
    maxWidth: { default: 5 },
    waterMark: {},
    throttle: { default: 16 },
    disabled: { type: Boolean, default: false },
    clearOnResize: { type: Boolean, default: false },
    defaultUrl: { default: "" }
  },
  emits: ["beginStroke", "endStroke", "beforeUpdateStroke", "afterUpdateStroke"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const canvasOptions = ref({
      signaturePad: {},
      dotSize: 0.5,
      minWidth: 2,
      maxWidth: 2,
      throttle: 16,
      backgroundColor: props.options.backgroundColor,
      penColor: props.options.penColor,
      canvasUuid: `canvas${nanoid()}`
    });
    function isCanvasEmpty() {
      return canvasOptions.value.signaturePad.isEmpty();
    }
    function saveSignature(format) {
      return format ? canvasOptions.value.signaturePad.toDataURL(format) : canvasOptions.value.signaturePad.toDataURL();
    }
    function clearCanvas() {
      return canvasOptions.value.signaturePad.clear();
    }
    const canvas = document.getElementById(canvasOptions.value.canvasUuid);
    function fromDataURL(url) {
      return canvasOptions.value.signaturePad.fromDataURL(url);
    }
    function undo() {
      const canvasData = canvasOptions.value.signaturePad.toData();
      if (canvasData.length) {
        canvasData.pop();
        canvasOptions.value.signaturePad.fromData(canvasData);
      }
    }
    ;
    function addWaterMark(data) {
      if (!(Object.prototype.toString.call(data) === "[object Object]")) {
        throw new Error(`Expected Object, got ${typeof data}.`);
      } else {
        const textData = {
          text: data.text || "",
          x: data.x || 20,
          y: data.y || 20,
          sx: data.sx || 40,
          sy: data.sy || 40
        };
        const VCanvas = document.getElementById(canvasOptions.value.canvasUuid);
        const ctx = VCanvas.getContext("2d");
        if (ctx) {
          ctx.font = data.font || "20px sans-serif";
          ctx.fillStyle = data.fillStyle || "#333";
          ctx.strokeStyle = data.strokeStyle || "#333";
          if (data.style === "all") {
            ctx.fillText(textData.text, textData.x, textData.y);
            ctx.strokeText(textData.text, textData.sx, textData.sy);
          } else if (data.style === "stroke") {
            ctx.strokeText(textData.text, textData.sx, textData.sy);
          } else {
            ctx.fillText(textData.text, textData.x, textData.y);
          }
        }
        canvasOptions.value.signaturePad._isEmpty = false;
      }
    }
    function resizeCanvas(c) {
      let url;
      if (!isCanvasEmpty()) {
        url = saveSignature();
      }
      const ratio = Math.max(window.devicePixelRatio || 1, 1);
      const reg = /px/;
      c.width = props.width && reg.test(props?.width) ? Number.parseInt(props?.width.replace(/px/g, "")) * ratio : c.offsetWidth * ratio;
      c.height = props.height && reg.test(props?.height) ? Number.parseInt(props?.height.replace(/px/g, "")) * ratio : c.offsetHeight * ratio;
      c.getContext("2d")?.scale(ratio, ratio);
      clearCanvas();
      !props.clearOnResize && url !== void 0 && fromDataURL(url);
      props.waterMark && Object.keys(props.waterMark).length && addWaterMark(props.waterMark);
    }
    function handleBeginStroke() {
      return canvasOptions.value.signaturePad.addEventListener("beginStroke", () => {
        emits("beginStroke", "Signature started");
      });
    }
    function handleEndStroke() {
      return canvasOptions.value.signaturePad.addEventListener("endStroke", () => {
        emits("endStroke", "Signature ended");
      });
    }
    function handleBeforeUpdateStroke() {
      return canvasOptions.value.signaturePad.addEventListener("beforeUpdateStroke", () => {
        emits("beforeUpdateStroke", "Signature before update");
      });
    }
    function handleAfterUpdateStroke() {
      return canvasOptions.value.signaturePad.addEventListener("afterUpdateStroke", () => {
        emits("afterUpdateStroke", "Signature after update");
      });
    }
    function draw() {
      const canvas2 = document.getElementById(canvasOptions.value.canvasUuid);
      if (!canvas2) {
        throw new Error(`Canvas element with ID ${canvasOptions.value.canvasUuid} not found.`);
      }
      ;
      canvasOptions.value.signaturePad = new SignaturePad(canvas2, canvasOptions.value);
      handleBeginStroke();
      handleEndStroke();
      handleBeforeUpdateStroke();
      handleAfterUpdateStroke();
      const resizeHandler = () => {
        resizeCanvas(canvas2);
      };
      window.addEventListener("resize", resizeHandler);
      resizeCanvas(canvas2);
      if (props.defaultUrl !== "") {
        fromDataURL(props.defaultUrl);
      }
      if (props.disabled) {
        canvasOptions.value.signaturePad.off();
      } else {
        canvasOptions.value.signaturePad.on();
      }
    }
    watchEffect(() => {
      canvasOptions.value.penColor = props.options.penColor;
      canvasOptions.value.signaturePad.penColor = props.options.penColor;
      canvasOptions.value.backgroundColor = props.options.backgroundColor;
      canvasOptions.value.signaturePad.backgroundColor = props.options.backgroundColor;
    });
    watch(() => props.minWidth, (newVal) => {
      if (newVal) {
        canvasOptions.value.minWidth = newVal;
        canvasOptions.value.signaturePad.minWidth = newVal;
      }
    }, { immediate: true });
    watch(() => props.maxWidth, (newVal) => {
      if (newVal) {
        canvasOptions.value.maxWidth = newVal;
        canvasOptions.value.signaturePad.maxWidth = newVal;
      }
    }, { immediate: true });
    watch(
      () => props.disabled,
      (val) => {
        if (val) {
          return canvasOptions.value.signaturePad.off();
        } else {
          return canvasOptions.value.signaturePad.on();
        }
      }
    );
    __expose({
      saveSignature,
      clearCanvas,
      addWaterMark,
      isCanvasEmpty,
      fromDataURL,
      undo
    });
    onMounted(() => {
      draw();
    });
    onBeforeUnmount(() => {
      const resizeHandler = () => {
        resizeCanvas(canvas);
      };
      window.removeEventListener("resize", resizeHandler);
    });
    return (_ctx, _cache) => {
      return _openBlock(), _createElementBlock(
        "div",
        {
          style: _normalizeStyle({ width: props.width, height: props.height }),
          onTouchmove: _cache[0] || (_cache[0] = _withModifiers(() => {
          }, ["prevent"]))
        },
        [
          _createElementVNode("canvas", {
            id: canvasOptions.value.canvasUuid,
            style: { "width": "100%", "height": "100%" },
            "data-uid": canvasOptions.value.canvasUuid
          }, null, 8, _hoisted_1)
        ],
        36
        /* STYLE, NEED_HYDRATION */
      );
    };
  }
});
var VueSignaturePad_default = _sfc_main;
export {
  VueSignaturePad_default as VueSignaturePad
};
//# sourceMappingURL=index.js.map